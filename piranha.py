# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
# Piranha FastJet Contrib

Python interface to the Piranha FastJet contrib package.

"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _piranha
else:
    import _piranha

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _piranha.SWIG_PyInstanceMethod_New
_swig_new_static_method = _piranha.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _piranha.delete_SwigPyIterator
    value = _swig_new_instance_method(_piranha.SwigPyIterator_value)
    incr = _swig_new_instance_method(_piranha.SwigPyIterator_incr)
    decr = _swig_new_instance_method(_piranha.SwigPyIterator_decr)
    distance = _swig_new_instance_method(_piranha.SwigPyIterator_distance)
    equal = _swig_new_instance_method(_piranha.SwigPyIterator_equal)
    copy = _swig_new_instance_method(_piranha.SwigPyIterator_copy)
    next = _swig_new_instance_method(_piranha.SwigPyIterator_next)
    __next__ = _swig_new_instance_method(_piranha.SwigPyIterator___next__)
    previous = _swig_new_instance_method(_piranha.SwigPyIterator_previous)
    advance = _swig_new_instance_method(_piranha.SwigPyIterator_advance)
    __eq__ = _swig_new_instance_method(_piranha.SwigPyIterator___eq__)
    __ne__ = _swig_new_instance_method(_piranha.SwigPyIterator___ne__)
    __iadd__ = _swig_new_instance_method(_piranha.SwigPyIterator___iadd__)
    __isub__ = _swig_new_instance_method(_piranha.SwigPyIterator___isub__)
    __add__ = _swig_new_instance_method(_piranha.SwigPyIterator___add__)
    __sub__ = _swig_new_instance_method(_piranha.SwigPyIterator___sub__)
    def __iter__(self):
        return self

# Register SwigPyIterator in _piranha:
_piranha.SwigPyIterator_swigregister(SwigPyIterator)

import fastjet
import eventgeometry

from fastjet import FastJetError

__version__ = '1.0.0a0'

class pairDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _piranha.pairDouble_swiginit(self, _piranha.new_pairDouble(*args))
    first = property(_piranha.pairDouble_first_get, _piranha.pairDouble_first_set)
    second = property(_piranha.pairDouble_second_get, _piranha.pairDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _piranha.delete_pairDouble

# Register pairDouble in _piranha:
_piranha.pairDouble_swigregister(pairDouble)

class pairPairDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _piranha.pairPairDouble_swiginit(self, _piranha.new_pairPairDouble(*args))
    first = property(_piranha.pairPairDouble_first_get, _piranha.pairPairDouble_first_set)
    second = property(_piranha.pairPairDouble_second_get, _piranha.pairPairDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _piranha.delete_pairPairDouble

# Register pairPairDouble in _piranha:
_piranha.pairPairDouble_swigregister(pairPairDouble)

class vectorVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_piranha.vectorVectorDouble_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_piranha.vectorVectorDouble___nonzero__)
    __bool__ = _swig_new_instance_method(_piranha.vectorVectorDouble___bool__)
    __len__ = _swig_new_instance_method(_piranha.vectorVectorDouble___len__)
    __getslice__ = _swig_new_instance_method(_piranha.vectorVectorDouble___getslice__)
    __setslice__ = _swig_new_instance_method(_piranha.vectorVectorDouble___setslice__)
    __delslice__ = _swig_new_instance_method(_piranha.vectorVectorDouble___delslice__)
    __delitem__ = _swig_new_instance_method(_piranha.vectorVectorDouble___delitem__)
    __getitem__ = _swig_new_instance_method(_piranha.vectorVectorDouble___getitem__)
    __setitem__ = _swig_new_instance_method(_piranha.vectorVectorDouble___setitem__)
    pop = _swig_new_instance_method(_piranha.vectorVectorDouble_pop)
    append = _swig_new_instance_method(_piranha.vectorVectorDouble_append)
    empty = _swig_new_instance_method(_piranha.vectorVectorDouble_empty)
    size = _swig_new_instance_method(_piranha.vectorVectorDouble_size)
    swap = _swig_new_instance_method(_piranha.vectorVectorDouble_swap)
    begin = _swig_new_instance_method(_piranha.vectorVectorDouble_begin)
    end = _swig_new_instance_method(_piranha.vectorVectorDouble_end)
    rbegin = _swig_new_instance_method(_piranha.vectorVectorDouble_rbegin)
    rend = _swig_new_instance_method(_piranha.vectorVectorDouble_rend)
    clear = _swig_new_instance_method(_piranha.vectorVectorDouble_clear)
    get_allocator = _swig_new_instance_method(_piranha.vectorVectorDouble_get_allocator)
    pop_back = _swig_new_instance_method(_piranha.vectorVectorDouble_pop_back)
    erase = _swig_new_instance_method(_piranha.vectorVectorDouble_erase)

    def __init__(self, *args):
        _piranha.vectorVectorDouble_swiginit(self, _piranha.new_vectorVectorDouble(*args))
    push_back = _swig_new_instance_method(_piranha.vectorVectorDouble_push_back)
    front = _swig_new_instance_method(_piranha.vectorVectorDouble_front)
    back = _swig_new_instance_method(_piranha.vectorVectorDouble_back)
    assign = _swig_new_instance_method(_piranha.vectorVectorDouble_assign)
    resize = _swig_new_instance_method(_piranha.vectorVectorDouble_resize)
    insert = _swig_new_instance_method(_piranha.vectorVectorDouble_insert)
    reserve = _swig_new_instance_method(_piranha.vectorVectorDouble_reserve)
    capacity = _swig_new_instance_method(_piranha.vectorVectorDouble_capacity)
    __swig_destroy__ = _piranha.delete_vectorVectorDouble

# Register vectorVectorDouble in _piranha:
_piranha.vectorVectorDouble_swigregister(vectorVectorDouble)

class vectorSubtractionHistory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_piranha.vectorSubtractionHistory_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_piranha.vectorSubtractionHistory___nonzero__)
    __bool__ = _swig_new_instance_method(_piranha.vectorSubtractionHistory___bool__)
    __len__ = _swig_new_instance_method(_piranha.vectorSubtractionHistory___len__)
    __getslice__ = _swig_new_instance_method(_piranha.vectorSubtractionHistory___getslice__)
    __setslice__ = _swig_new_instance_method(_piranha.vectorSubtractionHistory___setslice__)
    __delslice__ = _swig_new_instance_method(_piranha.vectorSubtractionHistory___delslice__)
    __delitem__ = _swig_new_instance_method(_piranha.vectorSubtractionHistory___delitem__)
    __getitem__ = _swig_new_instance_method(_piranha.vectorSubtractionHistory___getitem__)
    __setitem__ = _swig_new_instance_method(_piranha.vectorSubtractionHistory___setitem__)
    pop = _swig_new_instance_method(_piranha.vectorSubtractionHistory_pop)
    append = _swig_new_instance_method(_piranha.vectorSubtractionHistory_append)
    empty = _swig_new_instance_method(_piranha.vectorSubtractionHistory_empty)
    size = _swig_new_instance_method(_piranha.vectorSubtractionHistory_size)
    swap = _swig_new_instance_method(_piranha.vectorSubtractionHistory_swap)
    begin = _swig_new_instance_method(_piranha.vectorSubtractionHistory_begin)
    end = _swig_new_instance_method(_piranha.vectorSubtractionHistory_end)
    rbegin = _swig_new_instance_method(_piranha.vectorSubtractionHistory_rbegin)
    rend = _swig_new_instance_method(_piranha.vectorSubtractionHistory_rend)
    clear = _swig_new_instance_method(_piranha.vectorSubtractionHistory_clear)
    get_allocator = _swig_new_instance_method(_piranha.vectorSubtractionHistory_get_allocator)
    pop_back = _swig_new_instance_method(_piranha.vectorSubtractionHistory_pop_back)
    erase = _swig_new_instance_method(_piranha.vectorSubtractionHistory_erase)

    def __init__(self, *args):
        _piranha.vectorSubtractionHistory_swiginit(self, _piranha.new_vectorSubtractionHistory(*args))
    push_back = _swig_new_instance_method(_piranha.vectorSubtractionHistory_push_back)
    front = _swig_new_instance_method(_piranha.vectorSubtractionHistory_front)
    back = _swig_new_instance_method(_piranha.vectorSubtractionHistory_back)
    assign = _swig_new_instance_method(_piranha.vectorSubtractionHistory_assign)
    resize = _swig_new_instance_method(_piranha.vectorSubtractionHistory_resize)
    insert = _swig_new_instance_method(_piranha.vectorSubtractionHistory_insert)
    reserve = _swig_new_instance_method(_piranha.vectorSubtractionHistory_reserve)
    capacity = _swig_new_instance_method(_piranha.vectorSubtractionHistory_capacity)
    __swig_destroy__ = _piranha.delete_vectorSubtractionHistory

# Register vectorSubtractionHistory in _piranha:
_piranha.vectorSubtractionHistory_swigregister(vectorSubtractionHistory)

class vectorVectorPseudoJet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_piranha.vectorVectorPseudoJet___nonzero__)
    __bool__ = _swig_new_instance_method(_piranha.vectorVectorPseudoJet___bool__)
    __len__ = _swig_new_instance_method(_piranha.vectorVectorPseudoJet___len__)
    __getslice__ = _swig_new_instance_method(_piranha.vectorVectorPseudoJet___getslice__)
    __setslice__ = _swig_new_instance_method(_piranha.vectorVectorPseudoJet___setslice__)
    __delslice__ = _swig_new_instance_method(_piranha.vectorVectorPseudoJet___delslice__)
    __delitem__ = _swig_new_instance_method(_piranha.vectorVectorPseudoJet___delitem__)
    __getitem__ = _swig_new_instance_method(_piranha.vectorVectorPseudoJet___getitem__)
    __setitem__ = _swig_new_instance_method(_piranha.vectorVectorPseudoJet___setitem__)
    pop = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_pop)
    append = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_append)
    empty = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_empty)
    size = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_size)
    swap = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_swap)
    begin = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_begin)
    end = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_end)
    rbegin = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_rbegin)
    rend = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_rend)
    clear = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_clear)
    get_allocator = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_get_allocator)
    pop_back = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_pop_back)
    erase = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_erase)

    def __init__(self, *args):
        _piranha.vectorVectorPseudoJet_swiginit(self, _piranha.new_vectorVectorPseudoJet(*args))
    push_back = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_push_back)
    front = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_front)
    back = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_back)
    assign = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_assign)
    resize = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_resize)
    insert = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_insert)
    reserve = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_reserve)
    capacity = _swig_new_instance_method(_piranha.vectorVectorPseudoJet_capacity)
    __swig_destroy__ = _piranha.delete_vectorVectorPseudoJet

# Register vectorVectorPseudoJet in _piranha:
_piranha.vectorVectorPseudoJet_swigregister(vectorVectorPseudoJet)

class vectorPairDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_piranha.vectorPairDouble_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_piranha.vectorPairDouble___nonzero__)
    __bool__ = _swig_new_instance_method(_piranha.vectorPairDouble___bool__)
    __len__ = _swig_new_instance_method(_piranha.vectorPairDouble___len__)
    __getslice__ = _swig_new_instance_method(_piranha.vectorPairDouble___getslice__)
    __setslice__ = _swig_new_instance_method(_piranha.vectorPairDouble___setslice__)
    __delslice__ = _swig_new_instance_method(_piranha.vectorPairDouble___delslice__)
    __delitem__ = _swig_new_instance_method(_piranha.vectorPairDouble___delitem__)
    __getitem__ = _swig_new_instance_method(_piranha.vectorPairDouble___getitem__)
    __setitem__ = _swig_new_instance_method(_piranha.vectorPairDouble___setitem__)
    pop = _swig_new_instance_method(_piranha.vectorPairDouble_pop)
    append = _swig_new_instance_method(_piranha.vectorPairDouble_append)
    empty = _swig_new_instance_method(_piranha.vectorPairDouble_empty)
    size = _swig_new_instance_method(_piranha.vectorPairDouble_size)
    swap = _swig_new_instance_method(_piranha.vectorPairDouble_swap)
    begin = _swig_new_instance_method(_piranha.vectorPairDouble_begin)
    end = _swig_new_instance_method(_piranha.vectorPairDouble_end)
    rbegin = _swig_new_instance_method(_piranha.vectorPairDouble_rbegin)
    rend = _swig_new_instance_method(_piranha.vectorPairDouble_rend)
    clear = _swig_new_instance_method(_piranha.vectorPairDouble_clear)
    get_allocator = _swig_new_instance_method(_piranha.vectorPairDouble_get_allocator)
    pop_back = _swig_new_instance_method(_piranha.vectorPairDouble_pop_back)
    erase = _swig_new_instance_method(_piranha.vectorPairDouble_erase)

    def __init__(self, *args):
        _piranha.vectorPairDouble_swiginit(self, _piranha.new_vectorPairDouble(*args))
    push_back = _swig_new_instance_method(_piranha.vectorPairDouble_push_back)
    front = _swig_new_instance_method(_piranha.vectorPairDouble_front)
    back = _swig_new_instance_method(_piranha.vectorPairDouble_back)
    assign = _swig_new_instance_method(_piranha.vectorPairDouble_assign)
    resize = _swig_new_instance_method(_piranha.vectorPairDouble_resize)
    insert = _swig_new_instance_method(_piranha.vectorPairDouble_insert)
    reserve = _swig_new_instance_method(_piranha.vectorPairDouble_reserve)
    capacity = _swig_new_instance_method(_piranha.vectorPairDouble_capacity)
    __swig_destroy__ = _piranha.delete_vectorPairDouble

# Register vectorPairDouble in _piranha:
_piranha.vectorPairDouble_swigregister(vectorPairDouble)

class vectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iterator = _swig_new_instance_method(_piranha.vectorInt_iterator)
    def __iter__(self):
        return self.iterator()
    __nonzero__ = _swig_new_instance_method(_piranha.vectorInt___nonzero__)
    __bool__ = _swig_new_instance_method(_piranha.vectorInt___bool__)
    __len__ = _swig_new_instance_method(_piranha.vectorInt___len__)
    __getslice__ = _swig_new_instance_method(_piranha.vectorInt___getslice__)
    __setslice__ = _swig_new_instance_method(_piranha.vectorInt___setslice__)
    __delslice__ = _swig_new_instance_method(_piranha.vectorInt___delslice__)
    __delitem__ = _swig_new_instance_method(_piranha.vectorInt___delitem__)
    __getitem__ = _swig_new_instance_method(_piranha.vectorInt___getitem__)
    __setitem__ = _swig_new_instance_method(_piranha.vectorInt___setitem__)
    pop = _swig_new_instance_method(_piranha.vectorInt_pop)
    append = _swig_new_instance_method(_piranha.vectorInt_append)
    empty = _swig_new_instance_method(_piranha.vectorInt_empty)
    size = _swig_new_instance_method(_piranha.vectorInt_size)
    swap = _swig_new_instance_method(_piranha.vectorInt_swap)
    begin = _swig_new_instance_method(_piranha.vectorInt_begin)
    end = _swig_new_instance_method(_piranha.vectorInt_end)
    rbegin = _swig_new_instance_method(_piranha.vectorInt_rbegin)
    rend = _swig_new_instance_method(_piranha.vectorInt_rend)
    clear = _swig_new_instance_method(_piranha.vectorInt_clear)
    get_allocator = _swig_new_instance_method(_piranha.vectorInt_get_allocator)
    pop_back = _swig_new_instance_method(_piranha.vectorInt_pop_back)
    erase = _swig_new_instance_method(_piranha.vectorInt_erase)

    def __init__(self, *args):
        _piranha.vectorInt_swiginit(self, _piranha.new_vectorInt(*args))
    push_back = _swig_new_instance_method(_piranha.vectorInt_push_back)
    front = _swig_new_instance_method(_piranha.vectorInt_front)
    back = _swig_new_instance_method(_piranha.vectorInt_back)
    assign = _swig_new_instance_method(_piranha.vectorInt_assign)
    resize = _swig_new_instance_method(_piranha.vectorInt_resize)
    insert = _swig_new_instance_method(_piranha.vectorInt_insert)
    reserve = _swig_new_instance_method(_piranha.vectorInt_reserve)
    capacity = _swig_new_instance_method(_piranha.vectorInt_capacity)
    __swig_destroy__ = _piranha.delete_vectorInt

# Register vectorInt in _piranha:
_piranha.vectorInt_swigregister(vectorInt)

VERBOSE = _piranha.VERBOSE
INFINITE_VERTEX_ID = _piranha.INFINITE_VERTEX_ID
DEFAULT_VORONOI_QUANTITY = _piranha.DEFAULT_VORONOI_QUANTITY
REMOVED_COINCIDENCE = _piranha.REMOVED_COINCIDENCE
phi_fix = _piranha.phi_fix
SubtractionType_Area = _piranha.SubtractionType_Area
SubtractionType_AreaTrackEMD = _piranha.SubtractionType_AreaTrackEMD
SubtractionType_EMD = _piranha.SubtractionType_EMD
RhoSubtractionMode_Additive = _piranha.RhoSubtractionMode_Additive
RhoSubtractionMode_Fractional = _piranha.RhoSubtractionMode_Fractional
RemovalResult_Success = _piranha.RemovalResult_Success
RemovalResult_Coincidence = _piranha.RemovalResult_Coincidence
class DynamicVoronoiBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _piranha.delete_DynamicVoronoiBase
    description = _swig_new_instance_method(_piranha.DynamicVoronoiBase_description)
    set_subtraction_type = _swig_new_instance_method(_piranha.DynamicVoronoiBase_set_subtraction_type)
    set_R = _swig_new_instance_method(_piranha.DynamicVoronoiBase_set_R)
    subtraction_type = _swig_new_instance_method(_piranha.DynamicVoronoiBase_subtraction_type)
    track_emds = _swig_new_instance_method(_piranha.DynamicVoronoiBase_track_emds)
    R = _swig_new_instance_method(_piranha.DynamicVoronoiBase_R)
    __call__ = _swig_new_instance_method(_piranha.DynamicVoronoiBase___call__)
    valid_point = _swig_new_instance_method(_piranha.DynamicVoronoiBase_valid_point)
    number_of_primary_delaunay_vertices = _swig_new_instance_method(_piranha.DynamicVoronoiBase_number_of_primary_delaunay_vertices)
    total_area = _swig_new_instance_method(_piranha.DynamicVoronoiBase_total_area)
    areas = _swig_new_instance_method(_piranha.DynamicVoronoiBase_areas)
    area = _swig_new_instance_method(_piranha.DynamicVoronoiBase_area)
    coincidences = _swig_new_instance_method(_piranha.DynamicVoronoiBase_coincidences)
    emd_density = _swig_new_instance_method(_piranha.DynamicVoronoiBase_emd_density)
    neighbors = _swig_new_instance_method(_piranha.DynamicVoronoiBase_neighbors)
    vertex_is_primary_and_active = _swig_new_instance_method(_piranha.DynamicVoronoiBase_vertex_is_primary_and_active)

# Register DynamicVoronoiBase in _piranha:
_piranha.DynamicVoronoiBase_swigregister(DynamicVoronoiBase)
cvar = _piranha.cvar
PI = cvar.PI
TWOPI = cvar.TWOPI

class DynamicVoronoiCylinder(DynamicVoronoiBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _piranha.DynamicVoronoiCylinder_swiginit(self, _piranha.new_DynamicVoronoiCylinder(*args))
    primary_region = _swig_new_instance_method(_piranha.DynamicVoronoiCylinder_primary_region)
    valid_point = _swig_new_instance_method(_piranha.DynamicVoronoiCylinder_valid_point)
    neighbors = _swig_new_instance_method(_piranha.DynamicVoronoiCylinder_neighbors)
    remove = _swig_new_instance_method(_piranha.DynamicVoronoiCylinder_remove)
    __swig_destroy__ = _piranha.delete_DynamicVoronoiCylinder

# Register DynamicVoronoiCylinder in _piranha:
_piranha.DynamicVoronoiCylinder_swigregister(DynamicVoronoiCylinder)

class DynamicVoronoiDisk(DynamicVoronoiBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _piranha.DynamicVoronoiDisk_swiginit(self, _piranha.new_DynamicVoronoiDisk(*args))
    set_R = _swig_new_instance_method(_piranha.DynamicVoronoiDisk_set_R)
    set_center = _swig_new_instance_method(_piranha.DynamicVoronoiDisk_set_center)
    x0 = _swig_new_instance_method(_piranha.DynamicVoronoiDisk_x0)
    y0 = _swig_new_instance_method(_piranha.DynamicVoronoiDisk_y0)
    valid_point = _swig_new_instance_method(_piranha.DynamicVoronoiDisk_valid_point)
    remove = _swig_new_instance_method(_piranha.DynamicVoronoiDisk_remove)
    __swig_destroy__ = _piranha.delete_DynamicVoronoiDisk

# Register DynamicVoronoiDisk in _piranha:
_piranha.DynamicVoronoiDisk_swigregister(DynamicVoronoiDisk)

VERTEX_DEFAULT_IND = _piranha.VERTEX_DEFAULT_IND
class SubtractionHistory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _piranha.SubtractionHistory_swiginit(self, _piranha.new_SubtractionHistory(*args))
    areas = _swig_new_instance_method(_piranha.SubtractionHistory_areas)
    zpt = _swig_new_instance_method(_piranha.SubtractionHistory_zpt)
    zemd = _swig_new_instance_method(_piranha.SubtractionHistory_zemd)
    nvalid = _swig_new_instance_method(_piranha.SubtractionHistory_nvalid)
    emdtot = _swig_new_instance_method(_piranha.SubtractionHistory_emdtot)
    nremoved = _swig_new_instance_method(_piranha.SubtractionHistory_nremoved)
    __swig_destroy__ = _piranha.delete_SubtractionHistory

# Register SubtractionHistory in _piranha:
_piranha.SubtractionHistory_swigregister(SubtractionHistory)
piranha_epsilon = cvar.piranha_epsilon

class GhostGridBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _piranha.GhostGridBase_swiginit(self, _piranha.new_GhostGridBase(*args))
    __swig_destroy__ = _piranha.delete_GhostGridBase
    description = _swig_new_instance_method(_piranha.GhostGridBase_description)
    drap = _swig_new_instance_method(_piranha.GhostGridBase_drap)
    dphi = _swig_new_instance_method(_piranha.GhostGridBase_dphi)
    nrap = _swig_new_instance_method(_piranha.GhostGridBase_nrap)
    nphi = _swig_new_instance_method(_piranha.GhostGridBase_nphi)
    points = _swig_new_instance_method(_piranha.GhostGridBase_points)
    ghosts = _swig_new_instance_method(_piranha.GhostGridBase_ghosts)
    nghosts = _swig_new_instance_method(_piranha.GhostGridBase_nghosts)

# Register GhostGridBase in _piranha:
_piranha.GhostGridBase_swigregister(GhostGridBase)

class GhostGridRectangle(GhostGridBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.GhostGridRectangle_swiginit(self, _piranha.new_GhostGridRectangle(*args))
    description = _swig_new_instance_method(_piranha.GhostGridRectangle_description)
    region = _swig_new_instance_method(_piranha.GhostGridRectangle_region)
    __str__ = _swig_new_instance_method(_piranha.GhostGridRectangle___str__)
    __repr__ = _swig_new_instance_method(_piranha.GhostGridRectangle___repr__)
    __swig_destroy__ = _piranha.delete_GhostGridRectangle

# Register GhostGridRectangle in _piranha:
_piranha.GhostGridRectangle_swigregister(GhostGridRectangle)

class GhostGridDisk(GhostGridBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.GhostGridDisk_swiginit(self, _piranha.new_GhostGridDisk(*args))
    description = _swig_new_instance_method(_piranha.GhostGridDisk_description)
    R = _swig_new_instance_method(_piranha.GhostGridDisk_R)
    __str__ = _swig_new_instance_method(_piranha.GhostGridDisk___str__)
    __repr__ = _swig_new_instance_method(_piranha.GhostGridDisk___repr__)
    __swig_destroy__ = _piranha.delete_GhostGridDisk

# Register GhostGridDisk in _piranha:
_piranha.GhostGridDisk_swigregister(GhostGridDisk)

INVALID_TOTAL_WEIGHT = _piranha.INVALID_TOTAL_WEIGHT
class IteratedVoronoiSubtractorDiskBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self):
        _piranha.IteratedVoronoiSubtractorDiskBase_swiginit(self, _piranha.new_IteratedVoronoiSubtractorDiskBase())
    __swig_destroy__ = _piranha.delete_IteratedVoronoiSubtractorDiskBase
    description = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_description)
    set_z = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_z)
    set_zpt = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_zpt)
    set_zemd = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_zemd)
    set_background_estimator = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_background_estimator)
    set_rho_subtraction_mode = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_rho_subtraction_mode)
    set_jet_constituents_use_same_rho = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_jet_constituents_use_same_rho)
    set_subtraction_type = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_subtraction_type)
    set_R = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_R)
    set_allow_repeats = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_allow_repeats)
    set_store_history = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_set_store_history)
    zpt = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_zpt)
    zemd = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_zemd)
    background_estimator = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_background_estimator)
    jet_constituents_use_same_rho = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_jet_constituents_use_same_rho)
    rho_subtraction_mode = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_rho_subtraction_mode)
    track_emds = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_track_emds)
    total_area = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_total_area)
    subtraction_type = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_subtraction_type)
    R = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_R)
    allow_repeats = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_allow_repeats)
    store_history = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_store_history)
    vor = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_vor)
    reapply = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_reapply)
    emd = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_emd)
    nvalid = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_nvalid)
    nremoved = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_nremoved)
    history = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_history)
    hist_size = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_hist_size)
    hist_i_areas_size = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase_hist_i_areas_size)
    __str__ = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase___str__)
    __repr__ = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDiskBase___repr__)

# Register IteratedVoronoiSubtractorDiskBase in _piranha:
_piranha.IteratedVoronoiSubtractorDiskBase_swigregister(IteratedVoronoiSubtractorDiskBase)

class IteratedVoronoiSubtractorCylinderBase(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self):
        _piranha.IteratedVoronoiSubtractorCylinderBase_swiginit(self, _piranha.new_IteratedVoronoiSubtractorCylinderBase())
    __swig_destroy__ = _piranha.delete_IteratedVoronoiSubtractorCylinderBase
    description = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_description)
    set_z = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_z)
    set_zpt = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_zpt)
    set_zemd = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_zemd)
    set_background_estimator = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_background_estimator)
    set_rho_subtraction_mode = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_rho_subtraction_mode)
    set_jet_constituents_use_same_rho = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_jet_constituents_use_same_rho)
    set_subtraction_type = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_subtraction_type)
    set_R = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_R)
    set_allow_repeats = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_allow_repeats)
    set_store_history = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_set_store_history)
    zpt = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_zpt)
    zemd = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_zemd)
    background_estimator = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_background_estimator)
    jet_constituents_use_same_rho = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_jet_constituents_use_same_rho)
    rho_subtraction_mode = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_rho_subtraction_mode)
    track_emds = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_track_emds)
    total_area = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_total_area)
    subtraction_type = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_subtraction_type)
    R = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_R)
    allow_repeats = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_allow_repeats)
    store_history = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_store_history)
    vor = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_vor)
    reapply = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_reapply)
    emd = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_emd)
    nvalid = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_nvalid)
    nremoved = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_nremoved)
    history = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_history)
    hist_size = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_hist_size)
    hist_i_areas_size = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase_hist_i_areas_size)
    __str__ = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase___str__)
    __repr__ = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinderBase___repr__)

# Register IteratedVoronoiSubtractorCylinderBase in _piranha:
_piranha.IteratedVoronoiSubtractorCylinderBase_swigregister(IteratedVoronoiSubtractorCylinderBase)

class OptimalTransportSubtractorTransverseMomentumDeltaR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorTransverseMomentumDeltaR_swiginit(self, _piranha.new_OptimalTransportSubtractorTransverseMomentumDeltaR(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumDeltaR_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumDeltaR_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumDeltaR_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumDeltaR_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumDeltaR___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumDeltaR___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumDeltaR___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorTransverseMomentumDeltaR

# Register OptimalTransportSubtractorTransverseMomentumDeltaR in _piranha:
_piranha.OptimalTransportSubtractorTransverseMomentumDeltaR_swigregister(OptimalTransportSubtractorTransverseMomentumDeltaR)

class OptimalTransportSubtractorTransverseMomentumHadronicDot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorTransverseMomentumHadronicDot_swiginit(self, _piranha.new_OptimalTransportSubtractorTransverseMomentumHadronicDot(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDot_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDot_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDot_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDot_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDot___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDot___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDot___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorTransverseMomentumHadronicDot

# Register OptimalTransportSubtractorTransverseMomentumHadronicDot in _piranha:
_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDot_swigregister(OptimalTransportSubtractorTransverseMomentumHadronicDot)

class OptimalTransportSubtractorTransverseMomentumHadronicDotMassive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorTransverseMomentumHadronicDotMassive_swiginit(self, _piranha.new_OptimalTransportSubtractorTransverseMomentumHadronicDotMassive(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDotMassive_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDotMassive_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDotMassive_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDotMassive_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDotMassive___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDotMassive___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDotMassive___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorTransverseMomentumHadronicDotMassive

# Register OptimalTransportSubtractorTransverseMomentumHadronicDotMassive in _piranha:
_piranha.OptimalTransportSubtractorTransverseMomentumHadronicDotMassive_swigregister(OptimalTransportSubtractorTransverseMomentumHadronicDotMassive)

class OptimalTransportSubtractorTransverseEnergyDeltaR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorTransverseEnergyDeltaR_swiginit(self, _piranha.new_OptimalTransportSubtractorTransverseEnergyDeltaR(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyDeltaR_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyDeltaR_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyDeltaR_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyDeltaR_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyDeltaR___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyDeltaR___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyDeltaR___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorTransverseEnergyDeltaR

# Register OptimalTransportSubtractorTransverseEnergyDeltaR in _piranha:
_piranha.OptimalTransportSubtractorTransverseEnergyDeltaR_swigregister(OptimalTransportSubtractorTransverseEnergyDeltaR)

class OptimalTransportSubtractorTransverseEnergyHadronicDot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorTransverseEnergyHadronicDot_swiginit(self, _piranha.new_OptimalTransportSubtractorTransverseEnergyHadronicDot(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDot_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDot_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDot_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDot_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDot___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDot___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDot___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorTransverseEnergyHadronicDot

# Register OptimalTransportSubtractorTransverseEnergyHadronicDot in _piranha:
_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDot_swigregister(OptimalTransportSubtractorTransverseEnergyHadronicDot)

class OptimalTransportSubtractorTransverseEnergyHadronicDotMassive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorTransverseEnergyHadronicDotMassive_swiginit(self, _piranha.new_OptimalTransportSubtractorTransverseEnergyHadronicDotMassive(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDotMassive_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDotMassive_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDotMassive_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDotMassive_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDotMassive___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDotMassive___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDotMassive___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorTransverseEnergyHadronicDotMassive

# Register OptimalTransportSubtractorTransverseEnergyHadronicDotMassive in _piranha:
_piranha.OptimalTransportSubtractorTransverseEnergyHadronicDotMassive_swigregister(OptimalTransportSubtractorTransverseEnergyHadronicDotMassive)

class OptimalTransportSubtractorMomentumEEDot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorMomentumEEDot_swiginit(self, _piranha.new_OptimalTransportSubtractorMomentumEEDot(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDot_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDot_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDot_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDot_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDot___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDot___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDot___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorMomentumEEDot

# Register OptimalTransportSubtractorMomentumEEDot in _piranha:
_piranha.OptimalTransportSubtractorMomentumEEDot_swigregister(OptimalTransportSubtractorMomentumEEDot)

class OptimalTransportSubtractorMomentumEEDotMassive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorMomentumEEDotMassive_swiginit(self, _piranha.new_OptimalTransportSubtractorMomentumEEDotMassive(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDotMassive_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDotMassive_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDotMassive_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDotMassive_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDotMassive___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDotMassive___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEDotMassive___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorMomentumEEDotMassive

# Register OptimalTransportSubtractorMomentumEEDotMassive in _piranha:
_piranha.OptimalTransportSubtractorMomentumEEDotMassive_swigregister(OptimalTransportSubtractorMomentumEEDotMassive)

class OptimalTransportSubtractorMomentumEEArcLength(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorMomentumEEArcLength_swiginit(self, _piranha.new_OptimalTransportSubtractorMomentumEEArcLength(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLength_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLength_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLength_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLength_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLength___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLength___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLength___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorMomentumEEArcLength

# Register OptimalTransportSubtractorMomentumEEArcLength in _piranha:
_piranha.OptimalTransportSubtractorMomentumEEArcLength_swigregister(OptimalTransportSubtractorMomentumEEArcLength)

class OptimalTransportSubtractorMomentumEEArcLengthMassive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorMomentumEEArcLengthMassive_swiginit(self, _piranha.new_OptimalTransportSubtractorMomentumEEArcLengthMassive(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLengthMassive_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLengthMassive_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLengthMassive_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLengthMassive_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLengthMassive___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLengthMassive___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorMomentumEEArcLengthMassive___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorMomentumEEArcLengthMassive

# Register OptimalTransportSubtractorMomentumEEArcLengthMassive in _piranha:
_piranha.OptimalTransportSubtractorMomentumEEArcLengthMassive_swigregister(OptimalTransportSubtractorMomentumEEArcLengthMassive)

class OptimalTransportSubtractorEnergyEEDot(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorEnergyEEDot_swiginit(self, _piranha.new_OptimalTransportSubtractorEnergyEEDot(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDot_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDot_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDot_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDot_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDot___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDot___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDot___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorEnergyEEDot

# Register OptimalTransportSubtractorEnergyEEDot in _piranha:
_piranha.OptimalTransportSubtractorEnergyEEDot_swigregister(OptimalTransportSubtractorEnergyEEDot)

class OptimalTransportSubtractorEnergyEEDotMassive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorEnergyEEDotMassive_swiginit(self, _piranha.new_OptimalTransportSubtractorEnergyEEDotMassive(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDotMassive_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDotMassive_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDotMassive_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDotMassive_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDotMassive___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDotMassive___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEDotMassive___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorEnergyEEDotMassive

# Register OptimalTransportSubtractorEnergyEEDotMassive in _piranha:
_piranha.OptimalTransportSubtractorEnergyEEDotMassive_swigregister(OptimalTransportSubtractorEnergyEEDotMassive)

class OptimalTransportSubtractorEnergyEEArcLength(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorEnergyEEArcLength_swiginit(self, _piranha.new_OptimalTransportSubtractorEnergyEEArcLength(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLength_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLength_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLength_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLength_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLength___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLength___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLength___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorEnergyEEArcLength

# Register OptimalTransportSubtractorEnergyEEArcLength in _piranha:
_piranha.OptimalTransportSubtractorEnergyEEArcLength_swigregister(OptimalTransportSubtractorEnergyEEArcLength)

class OptimalTransportSubtractorEnergyEEArcLengthMassive(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args):
        _piranha.OptimalTransportSubtractorEnergyEEArcLengthMassive_swiginit(self, _piranha.new_OptimalTransportSubtractorEnergyEEArcLengthMassive(*args))
    description = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLengthMassive_description)
    emd_obj = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLengthMassive_emd_obj)
    z = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLengthMassive_z)
    total_subtracted = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLengthMassive_total_subtracted)
    __call__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLengthMassive___call__)
    __str__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLengthMassive___str__)
    __repr__ = _swig_new_instance_method(_piranha.OptimalTransportSubtractorEnergyEEArcLengthMassive___repr__)
    __swig_destroy__ = _piranha.delete_OptimalTransportSubtractorEnergyEEArcLengthMassive

# Register OptimalTransportSubtractorEnergyEEArcLengthMassive in _piranha:
_piranha.OptimalTransportSubtractorEnergyEEArcLengthMassive_swigregister(OptimalTransportSubtractorEnergyEEArcLengthMassive)

class IteratedVoronoiSubtractorCylinder(IteratedVoronoiSubtractorCylinderBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _piranha.IteratedVoronoiSubtractorCylinder_swiginit(self, _piranha.new_IteratedVoronoiSubtractorCylinder(*args))
    __call__ = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorCylinder___call__)
    __swig_destroy__ = _piranha.delete_IteratedVoronoiSubtractorCylinder

# Register IteratedVoronoiSubtractorCylinder in _piranha:
_piranha.IteratedVoronoiSubtractorCylinder_swigregister(IteratedVoronoiSubtractorCylinder)

class IteratedVoronoiSubtractorDisk(IteratedVoronoiSubtractorDiskBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args, **kwargs):
        _piranha.IteratedVoronoiSubtractorDisk_swiginit(self, _piranha.new_IteratedVoronoiSubtractorDisk(*args, **kwargs))
    __call__ = _swig_new_instance_method(_piranha.IteratedVoronoiSubtractorDisk___call__)
    __swig_destroy__ = _piranha.delete_IteratedVoronoiSubtractorDisk

# Register IteratedVoronoiSubtractorDisk in _piranha:
_piranha.IteratedVoronoiSubtractorDisk_swigregister(IteratedVoronoiSubtractorDisk)

class RecursiveSafeSubtractorTransverseMomentum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        _piranha.RecursiveSafeSubtractorTransverseMomentum_swiginit(self, _piranha.new_RecursiveSafeSubtractorTransverseMomentum(*args, **kwargs))
    description = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum_description)
    default_z = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum_default_z)
    default_f = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum_default_f)
    jet_alg = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum_jet_alg)
    weight_sums = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum_weight_sums)
    total_weight = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum_total_weight)
    reclustered_jet = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum_reclustered_jet)
    __str__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum___str__)
    __repr__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum___repr__)
    __call__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum___call__)
    apply = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseMomentum_apply)
    __swig_destroy__ = _piranha.delete_RecursiveSafeSubtractorTransverseMomentum

# Register RecursiveSafeSubtractorTransverseMomentum in _piranha:
_piranha.RecursiveSafeSubtractorTransverseMomentum_swigregister(RecursiveSafeSubtractorTransverseMomentum)

class RecursiveSafeSubtractorTransverseEnergy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        _piranha.RecursiveSafeSubtractorTransverseEnergy_swiginit(self, _piranha.new_RecursiveSafeSubtractorTransverseEnergy(*args, **kwargs))
    description = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy_description)
    default_z = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy_default_z)
    default_f = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy_default_f)
    jet_alg = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy_jet_alg)
    weight_sums = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy_weight_sums)
    total_weight = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy_total_weight)
    reclustered_jet = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy_reclustered_jet)
    __str__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy___str__)
    __repr__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy___repr__)
    __call__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy___call__)
    apply = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorTransverseEnergy_apply)
    __swig_destroy__ = _piranha.delete_RecursiveSafeSubtractorTransverseEnergy

# Register RecursiveSafeSubtractorTransverseEnergy in _piranha:
_piranha.RecursiveSafeSubtractorTransverseEnergy_swigregister(RecursiveSafeSubtractorTransverseEnergy)

class RecursiveSafeSubtractorEnergy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        _piranha.RecursiveSafeSubtractorEnergy_swiginit(self, _piranha.new_RecursiveSafeSubtractorEnergy(*args, **kwargs))
    description = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy_description)
    default_z = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy_default_z)
    default_f = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy_default_f)
    jet_alg = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy_jet_alg)
    weight_sums = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy_weight_sums)
    total_weight = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy_total_weight)
    reclustered_jet = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy_reclustered_jet)
    __str__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy___str__)
    __repr__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy___repr__)
    __call__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy___call__)
    apply = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorEnergy_apply)
    __swig_destroy__ = _piranha.delete_RecursiveSafeSubtractorEnergy

# Register RecursiveSafeSubtractorEnergy in _piranha:
_piranha.RecursiveSafeSubtractorEnergy_swigregister(RecursiveSafeSubtractorEnergy)

class RecursiveSafeSubtractorMomentum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        _piranha.RecursiveSafeSubtractorMomentum_swiginit(self, _piranha.new_RecursiveSafeSubtractorMomentum(*args, **kwargs))
    description = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum_description)
    default_z = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum_default_z)
    default_f = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum_default_f)
    jet_alg = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum_jet_alg)
    weight_sums = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum_weight_sums)
    total_weight = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum_total_weight)
    reclustered_jet = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum_reclustered_jet)
    __str__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum___str__)
    __repr__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum___repr__)
    __call__ = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum___call__)
    apply = _swig_new_instance_method(_piranha.RecursiveSafeSubtractorMomentum_apply)
    __swig_destroy__ = _piranha.delete_RecursiveSafeSubtractorMomentum

# Register RecursiveSafeSubtractorMomentum in _piranha:
_piranha.RecursiveSafeSubtractorMomentum_swigregister(RecursiveSafeSubtractorMomentum)



def OptimalTransportSubtractor(*args, weight='TransverseMomentum', pairwise_distance='DeltaR', **kwargs):

    if weight == 'TransverseMomentum':
        if pairwise_distance == 'DeltaR':
            return OptimalTransportSubtractorTransverseMomentumDeltaR(*args, **kwargs)
        elif pairwise_distance == 'HadronicDot':
            return OptimalTransportSubtractorTransverseMomentumHadronicDot(*args, **kwargs)
        elif pairwise_distance == 'HadronicDotMassive':
            return OptimalTransportSubtractorTransverseMomentumHadronicDotMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not recognized'.format(pairwise_distance))

    elif weight == 'TransverseEnergy':
        if pairwise_distance == 'DeltaR':
            return OptimalTransportSubtractorTransverseEnergyDeltaR(*args, **kwargs)
        elif pairwise_distance == 'HadronicDot':
            return OptimalTransportSubtractorTransverseEnergyHadronicDot(*args, **kwargs)
        elif pairwise_distance == 'HadronicDotMassive':
            return OptimalTransportSubtractorTransverseEnergyHadronicDotMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not recognized'.format(pairwise_distance))

    elif weight == 'Energy':
        if pairwise_distance == 'EEDot':
            return OptimalTransportSubtractorEnergyEEDot(*args, **kwargs)
        elif pairwise_distance == 'EEDotMassive':
            return OptimalTransportSubtractorEnergyEEDotMassive(*args, **kwargs)
        elif pairwise_distance == 'EEArcLength':
            return OptimalTransportSubtractorEnergyEEArcLength(*args, **kwargs)
        elif pairwise_distance == 'EEArcLengthMassive':
            return OptimalTransportSubtractorEnergyEEArcLengthMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not recognized'.format(pairwise_distance))

    elif weight == 'Momentum':
        if pairwise_distance == 'EEDot':
            return OptimalTransportSubtractorMomentumEEDot(*args, **kwargs)
        elif pairwise_distance == 'EEDotMassive':
            return OptimalTransportSubtractorMomentumEEDotMassive(*args, **kwargs)
        elif pairwise_distance == 'EEArcLength':
            return OptimalTransportSubtractorMomentumEEArcLength(*args, **kwargs)
        elif pairwise_distance == 'EEArcLengthMassive':
            return OptimalTransportSubtractorMomentumEEArcLengthMassive(*args, **kwargs)
        else:
            raise TypeError('pairwise distance `{}` not recognized'.format(pairwise_distance))

    else:
        raise TypeError('weight `{}` not recognized'.format(weight))

def RecursiveSafeSubtractor(*args, weight='TransverseMomentum', **kwargs):

    if weight == 'TransverseMomentum':
        return RecursiveSafeSubtractorTransverseMomentum(*args, **kwargs)
    elif weight == 'TransverseEnergy':
        return RecursiveSafeSubtractorTransverseEnergy(*args, **kwargs)
    elif weight == 'Energy':
        return RecursiveSafeSubtractorEnergy(*args, **kwargs)
    elif weight == 'Momentum':
        return RecursiveSafeSubtractorMomentum(*args, **kwargs)
    else:
        raise TypeError('weight `{}` not recognized'.format(weight))




